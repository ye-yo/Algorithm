#include <iostream>
using namespace std;

int DP[100][100001];
int main(void){
    int N, K;
    int W[101];
    int V[101];
    cin >> N >> K;
    for(int i = 0; i< N; i++){
        cin >> W[i] >> V[i];
    }

    for (int i = 1; i <= N; i++){
        //가방에 넣을 수 있는 무게가 1일 때부터 ~ K일때까지 계산
        //=> 기존 가방에 들어있던 물건들의 무게 합을 알아야 현재 물건을 넣을지 말지 계산이 가능하기 때문에
		for (int j = 1; j <= K; j++){ 
            if (j - W[i] < 0) // 가방에 넣을 수 있는 무게가 j일 때 0보다 작으면 넣지 못함
                DP[i][j] = DP[i - 1][j]; //이전 값 저장
            else
                DP[i][j] = max(DP[i - 1][j], DP[i - 1][j - W[i]] + V[i]);
                //물건을 가방에 담지 않는 경우 vs 가방에 담는 경우
                // 기존 가방에 들어있는 물건들의 가치합 vs 현재 물건을 넣을 수 있는 가방 무게에서의 가치 합 + 현재물건가치;
                //이건 => 기존 물건들로 무게 j를 만들기 vs 현재 물건 + 기존 물건들로 무게 j 만들기
                // =>기존 물건들로 무게 j를 만들기 vs 현재 물건 + (기존 물건들 무게 - 현재 물건 무게)
                // DP[i-1][j] : 기존 물건들로 무게 j를 만들었을 때의 가치 합
                // DP[i-1][j- W[i]] + V[i] : (기존 물건들 무게 - 현재물건 무게)일 때의 가치 합 + 현재 물건 무게
		}
        //아래와 같이 뒤에서부터 계산도 가능
        /*
        for(int j=k; j>=1; j--){
            if(W[i] <= j){
                DP[j] = max(DP[j], DP[j-W[i]] + V[i]);
            }
        }
        */
	}

	cout << DP[N][K];
    return 0;
}